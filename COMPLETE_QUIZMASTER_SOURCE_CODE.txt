# COMPLETE QUIZMASTER APPLICATION SOURCE CODE
# All files needed to build and deploy the QuizMaster quiz application

========================================
1. PACKAGE.JSON (Root directory)
========================================
{
  "name": "quizmaster",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "tsc && vite build",
    "start": "NODE_ENV=production node dist/index.js",
    "db:generate": "drizzle-kit generate",
    "db:migrate": "drizzle-kit migrate"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.3.2",
    "@neondatabase/serverless": "^0.7.2",
    "@radix-ui/react-accordion": "^1.1.2",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-aspect-ratio": "^1.0.3",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-collapsible": "^1.0.3",
    "@radix-ui/react-context-menu": "^2.1.5",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-hover-card": "^1.0.7",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-menubar": "^1.0.4",
    "@radix-ui/react-navigation-menu": "^1.1.4",
    "@radix-ui/react-popover": "^1.0.7",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-radio-group": "^1.1.3",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-toggle": "^1.0.3",
    "@radix-ui/react-toggle-group": "^1.0.4",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@replit/vite-plugin-cartographer": "^2.0.0",
    "@replit/vite-plugin-runtime-error-modal": "^2.0.0",
    "@tailwindcss/typography": "^0.5.10",
    "@tailwindcss/vite": "^4.0.0-alpha.5",
    "@tanstack/react-query": "^5.17.7",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "^4.17.21",
    "@types/express-session": "^1.17.10",
    "@types/node": "^20.10.6",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.2.46",
    "@types/react-dom": "^18.2.18",
    "@types/ws": "^8.5.10",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "cmdk": "^0.2.0",
    "connect-pg-simple": "^9.0.1",
    "date-fns": "^3.2.0",
    "drizzle-kit": "^0.20.7",
    "drizzle-orm": "^0.29.1",
    "drizzle-zod": "^0.5.1",
    "embla-carousel-react": "^8.0.0",
    "esbuild": "^0.19.11",
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "framer-motion": "^10.18.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.303.0",
    "memorystore": "^1.6.7",
    "next-themes": "^0.2.1",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "postcss": "^8.4.32",
    "react": "^18.2.0",
    "react-day-picker": "^8.10.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.49.2",
    "react-icons": "^4.12.0",
    "react-resizable-panels": "^0.0.55",
    "recharts": "^2.10.3",
    "tailwind-merge": "^2.2.0",
    "tailwindcss": "^3.4.0",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.6.2",
    "tw-animate-css": "^1.0.1",
    "typescript": "^5.3.3",
    "vaul": "^0.8.0",
    "vite": "^5.0.10",
    "wouter": "^3.0.0",
    "ws": "^8.16.0",
    "zod": "^3.22.4",
    "zod-validation-error": "^2.1.0"
  }
}

========================================
2. VITE.CONFIG.TS (Root directory)
========================================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import { cartographer } from "@replit/vite-plugin-cartographer";
import { runtimeErrorModal } from "@replit/vite-plugin-runtime-error-modal";
import path from "path";

export default defineConfig({
  plugins: [
    react(),
    cartographer(),
    runtimeErrorModal(),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./client/src"),
      "@assets": path.resolve(__dirname, "./client/src/assets"),
    },
  },
  root: "client",
  build: {
    outDir: "../dist/public",
    emptyOutDir: true,
  },
});

========================================
3. TSCONFIG.JSON (Root directory)
========================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./client/src/*"],
      "@assets/*": ["./client/src/assets/*"]
    }
  },
  "include": ["client/src", "server", "shared"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

========================================
4. TAILWIND.CONFIG.TS (Root directory)
========================================
import type { Config } from "tailwindcss";
import { fontFamily } from "tailwindcss/defaultTheme";

const config: Config = {
  darkMode: ["class"],
  content: [
    "./client/src/**/*.{ts,tsx}",
    "./client/index.html",
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: ["var(--font-sans)", ...fontFamily.sans],
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

export default config;

========================================
5. POSTCSS.CONFIG.JS (Root directory)
========================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

========================================
6. DRIZZLE.CONFIG.TS (Root directory)
========================================
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  schema: "./shared/schema.ts",
  out: "./drizzle",
  driver: "pg",
  dbCredentials: {
    connectionString: process.env.DATABASE_URL || "postgresql://localhost:5432/quizmaster",
  },
});

========================================
7. COMPONENTS.JSON (Root directory)
========================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "client/src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

========================================
8. CLIENT/INDEX.HTML
========================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>QuizMaster - Interactive Quiz Application</title>
    <meta name="description" content="Test your knowledge with QuizMaster - an interactive quiz application featuring personalized greetings, timed questions, and detailed performance analysis." />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

========================================
9. CLIENT/SRC/MAIN.TSX
========================================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { TooltipProvider } from "@/components/ui/tooltip";
import { Toaster } from "@/components/ui/toaster";
import App from "./App.tsx";
import "./index.css";

const queryClient = new QueryClient();

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <App />
        <Toaster />
      </TooltipProvider>
    </QueryClientProvider>
  </StrictMode>
);

========================================
10. CLIENT/SRC/INDEX.CSS
========================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

========================================
11. CLIENT/SRC/APP.TSX
========================================
import { Router, Route, Switch } from "wouter";
import Login from "@/pages/login";
import Dashboard from "@/pages/dashboard";
import Quiz from "@/pages/quiz";
import Results from "@/pages/results";
import Report from "@/pages/report";
import NotFound from "@/pages/not-found";

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/" component={Login} />
        <Route path="/dashboard" component={Dashboard} />
        <Route path="/quiz" component={Quiz} />
        <Route path="/results" component={Results} />
        <Route path="/report" component={Report} />
        <Route component={NotFound} />
      </Switch>
    </Router>
  );
}

export default App;

========================================
12. CLIENT/SRC/PAGES/LOGIN.TSX
========================================
import { useState } from 'react';
import { useLocation } from 'wouter';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Brain, ArrowRight } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { saveUser } from '@/lib/storage';

const loginSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

type LoginForm = z.infer<typeof loginSchema>;

export default function Login() {
  const [, setLocation] = useLocation();
  const [isRegistering, setIsRegistering] = useState(true);
  const { toast } = useToast();

  const form = useForm<LoginForm>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      name: '',
      email: '',
      password: '',
    },
  });

  const onSubmit = async (data: LoginForm) => {
    try {
      const userData = {
        id: Date.now(),
        name: data.name,
        email: data.email,
      };

      saveUser(userData);
      
      toast({
        title: 'Welcome to QuizMaster!',
        description: `Hello ${data.name}, ready to test your knowledge?`,
      });

      setLocation('/dashboard');
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Something went wrong. Please try again.',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-blue-100 px-4">
      <div className="max-w-md w-full">
        <Card className="shadow-xl">
          <CardHeader className="text-center">
            <div className="w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4">
              <Brain className="text-white text-2xl" />
            </div>
            <CardTitle className="text-3xl font-bold text-gray-900 mb-2">
              Welcome to QuizMaster
            </CardTitle>
            <p className="text-gray-600">Test your knowledge with interactive quizzes</p>
          </CardHeader>

          <CardContent>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {isRegistering && (
                <div>
                  <Label htmlFor="name" className="text-sm font-medium text-gray-700">
                    Full Name
                  </Label>
                  <Input
                    id="name"
                    placeholder="Enter your full name"
                    {...form.register('name')}
                    className="mt-1"
                  />
                  {form.formState.errors.name && (
                    <p className="text-sm text-red-600 mt-1">
                      {form.formState.errors.name.message}
                    </p>
                  )}
                </div>
              )}

              <div>
                <Label htmlFor="email" className="text-sm font-medium text-gray-700">
                  Email Address
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter your email"
                  {...form.register('email')}
                  className="mt-1"
                />
                {form.formState.errors.email && (
                  <p className="text-sm text-red-600 mt-1">
                    {form.formState.errors.email.message}
                  </p>
                )}
              </div>

              <div>
                <Label htmlFor="password" className="text-sm font-medium text-gray-700">
                  Password
                </Label>
                <Input
                  id="password"
                  type="password"
                  placeholder={isRegistering ? "Create a password" : "Enter your password"}
                  {...form.register('password')}
                  className="mt-1"
                />
                {form.formState.errors.password && (
                  <p className="text-sm text-red-600 mt-1">
                    {form.formState.errors.password.message}
                  </p>
                )}
              </div>

              <Button
                type="submit"
                className="w-full bg-primary hover:bg-primary/90 transform hover:scale-105 transition-all duration-200 shadow-lg"
                disabled={form.formState.isSubmitting}
              >
                {isRegistering ? 'Start Learning Journey' : 'Sign In'}
                <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </form>

            <div className="mt-6 text-center">
              <p className="text-gray-600">
                {isRegistering ? 'Already have an account?' : "Don't have an account?"}
                <button
                  type="button"
                  onClick={() => setIsRegistering(!isRegistering)}
                  className="text-primary font-medium hover:underline ml-1"
                >
                  {isRegistering ? 'Sign In' : 'Sign Up'}
                </button>
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

========================================
13. CLIENT/SRC/PAGES/DASHBOARD.TSX
========================================
import { useState, useEffect } from 'react';
import { useLocation } from 'wouter';
import { Search, Play, Trophy, Percent, Clock, Flame, Check, GraduationCap } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Header } from '@/components/header';
import { getUser, getQuizStats, getQuizHistory, type QuizStats } from '@/lib/storage';

const POPULAR_TOPICS = [
  { name: 'JavaScript', icon: '🟨', category: 'Programming' },
  { name: 'Python', icon: '🐍', category: 'Programming' },
  { name: 'Java', icon: '☕', category: 'Programming' },
  { name: 'React', icon: '⚛️', category: 'Frontend' },
  { name: 'HTML & CSS', icon: '🎨', category: 'Web Design' },
  { name: 'Science', icon: '🔬', category: 'General Knowledge' },
  { name: 'History', icon: '📚', category: 'General Knowledge' },
  { name: 'Geography', icon: '🌍', category: 'General Knowledge' },
  { name: 'Mathematics', icon: '🔢', category: 'Science' },
  { name: 'Sports', icon: '⚽', category: 'General Knowledge' },
];

export default function Dashboard() {
  const [, setLocation] = useLocation();
  const [selectedTopic, setSelectedTopic] = useState('');
  const [customTopic, setCustomTopic] = useState('');
  const [stats, setStats] = useState<QuizStats>({ completed: 0, avgScore: 0, timeSaved: '0m', streak: 0 });
  const [recentQuizzes, setRecentQuizzes] = useState<any[]>([]);

  const user = getUser();

  useEffect(() => {
    if (!user) {
      setLocation('/');
      return;
    }

    const userStats = getQuizStats();
    const history = getQuizHistory();
    
    setStats(userStats);
    setRecentQuizzes(history.slice(-3).reverse());
  }, []);

  if (!user) {
    return null;
  }

  const handleTopicSelect = (topic: string) => {
    setSelectedTopic(topic);
    setCustomTopic(topic);
  };

  const handleStartQuiz = () => {
    const topic = customTopic.trim() || selectedTopic;
    if (topic) {
      setLocation(`/quiz?topic=${encodeURIComponent(topic)}`);
    }
  };

  const canStartQuiz = customTopic.trim() || selectedTopic;

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-gradient-to-r from-primary to-blue-600 rounded-2xl p-8 mb-8 text-white">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold mb-2">
                Hello {user.name}, ready to conquer your next quiz?
              </h1>
              <p className="text-blue-100">Choose a topic and challenge your knowledge!</p>
            </div>
            <div className="hidden md:block">
              <div className="w-24 h-24 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <GraduationCap className="text-4xl" />
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <div className="w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mr-4">
                  <Trophy className="text-white h-6 w-6" />
                </div>
                <div>
                  <p className="text-sm text-gray-600">Quizzes Completed</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.completed}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <div className="w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4">
                  <Percent className="text-white h-6 w-6" />
                </div>
                <div>
                  <p className="text-sm text-gray-600">Average Score</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.avgScore}%</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <div className="w-12 h-12 bg-yellow-500 rounded-lg flex items-center justify-center mr-4">
                  <Clock className="text-white h-6 w-6" />
                </div>
                <div>
                  <p className="text-sm text-gray-600">Time Saved</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.timeSaved}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <div className="w-12 h-12 bg-red-500 rounded-lg flex items-center justify-center mr-4">
                  <Flame className="text-white h-6 w-6" />
                </div>
                <div>
                  <p className="text-sm text-gray-600">Current Streak</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.streak} days</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="text-2xl font-bold">Choose Your Quiz Topic</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <Input
                placeholder="Enter a topic (e.g., Java, Python, JavaScript, History, Science...)"
                value={customTopic}
                onChange={(e) => setCustomTopic(e.target.value)}
                className="pl-12 py-4 text-lg"
              />
            </div>

            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Popular Topics</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
                {POPULAR_TOPICS.map((topic) => (
                  <Button
                    key={topic.name}
                    variant={selectedTopic === topic.name ? "default" : "outline"}
                    className={`p-4 h-auto flex flex-col items-center space-y-2 transition-all group ${
                      selectedTopic === topic.name 
                        ? 'bg-primary text-white' 
                        : 'hover:bg-primary/5 hover:border-primary'
                    }`}
                    onClick={() => handleTopicSelect(topic.name)}
                  >
                    <span className="text-2xl group-hover:scale-110 transition-transform">
                      {topic.icon}
                    </span>
                    <span className="text-sm font-medium">{topic.name}</span>
                  </Button>
                ))}
              </div>
            </div>

            <div className="text-center pt-4">
              <Button
                onClick={handleStartQuiz}
                disabled={!canStartQuiz}
                className="bg-primary hover:bg-primary/90 px-8 py-4 text-lg font-semibold transform hover:scale-105 transition-all duration-200 shadow-lg"
              >
                <Play className="mr-2 h-5 w-5" />
                Start Quiz
              </Button>
            </div>
          </CardContent>
        </Card>

        {recentQuizzes.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-2xl font-bold">Recent Activity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {recentQuizzes.map((quiz, index) => (
                  <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-4">
                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                        quiz.percentage >= 80 ? 'bg-green-500' : 
                        quiz.percentage >= 60 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}>
                        <Check className="text-white h-5 w-5" />
                      </div>
                      <div>
                        <p className="font-medium text-gray-900">{quiz.topic} Quiz</p>
                        <p className="text-sm text-gray-600">
                          Completed {new Date(quiz.completedAt).toLocaleDateString()}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className={`font-bold ${
                        quiz.percentage >= 80 ? 'text-green-500' : 
                        quiz.percentage >= 60 ? 'text-yellow-500' : 'text-red-500'
                      }`}>
                        {quiz.correctAnswers}/{quiz.totalQuestions}
                      </p>
                      <p className="text-sm text-gray-600">{quiz.percentage}%</p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}

========================================
14. CLIENT/SRC/PAGES/QUIZ.TSX
========================================
import { useState, useEffect } from 'react';
import { useLocation } from 'wouter';
import { ChevronLeft, ChevronRight, Bookmark, Clock } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Header } from '@/components/header';
import { QuizTimer } from '@/components/quiz-timer';
import { useQuiz } from '@/hooks/use-quiz';
import { getUser } from '@/lib/storage';

export default function Quiz() {
  const [, setLocation] = useLocation();
  const [searchParams] = useState(() => new URLSearchParams(window.location.search));
  const topic = searchParams.get('topic') || 'General Knowledge';
  
  const user = getUser();
  const quiz = useQuiz();
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [bookmarkedQuestions, setBookmarkedQuestions] = useState<Set<number>>(new Set());

  useEffect(() => {
    if (!user) {
      setLocation('/');
      return;
    }

    if (quiz.questions.length === 0 && !quiz.isLoading) {
      quiz.startQuiz(topic);
    }
  }, [user, topic]);

  useEffect(() => {
    const currentAnswer = quiz.answers[quiz.currentQuestionIndex];
    setSelectedAnswer(currentAnswer || '');
  }, [quiz.currentQuestionIndex, quiz.answers]);

  useEffect(() => {
    if (quiz.isCompleted) {
      setLocation('/results');
    }
  }, [quiz.isCompleted, setLocation]);

  if (!user) {
    return null;
  }

  if (quiz.isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="flex items-center justify-center h-[calc(100vh-4rem)]">
          <div className="text-center">
            <div className="w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-lg text-gray-600">Loading quiz questions...</p>
          </div>
        </div>
      </div>
    );
  }

  if (quiz.error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Header />
        <div className="flex items-center justify-center h-[calc(100vh-4rem)]">
          <Card className="w-full max-w-md">
            <CardContent className="p-6 text-center">
              <p className="text-red-600 mb-4">{quiz.error}</p>
              <Button onClick={() => setLocation('/dashboard')}>
                Back to Dashboard
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  const currentQuestion = quiz.questions[quiz.currentQuestionIndex];
  if (!currentQuestion) return null;

  const progress = ((quiz.currentQuestionIndex + 1) / quiz.questions.length) * 100;

  const handleAnswerChange = (answer: string) => {
    setSelectedAnswer(answer);
    quiz.answerQuestion(answer);
  };

  const handleNext = () => {
    quiz.nextQuestion();
  };

  const handlePrevious = () => {
    quiz.previousQuestion();
  };

  const handleTimeUp = () => {
    quiz.nextQuestion();
  };

  const handleTimeSpent = (timeSpent: number) => {
    quiz.recordTimeSpent(quiz.currentQuestionIndex, timeSpent);
  };

  const toggleBookmark = () => {
    const newBookmarks = new Set(bookmarkedQuestions);
    if (newBookmarks.has(quiz.currentQuestionIndex)) {
      newBookmarks.delete(quiz.currentQuestionIndex);
    } else {
      newBookmarks.add(quiz.currentQuestionIndex);
    }
    setBookmarkedQuestions(newBookmarks);
  };

  const getQuestionStatus = (index: number) => {
    if (index === quiz.currentQuestionIndex) return 'current';
    if (quiz.answers[index]) return 'answered';
    return 'unanswered';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <Card className="mb-6">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">{topic} Quiz</h1>
                <p className="text-gray-600">
                  Question {quiz.currentQuestionIndex + 1} of {quiz.questions.length}
                </p>
              </div>
              <QuizTimer
                duration={45}
                onTimeUp={handleTimeUp}
                onTimeSpent={handleTimeSpent}
                isActive={true}
                reset={quiz.currentQuestionIndex}
              />
            </div>

            <Progress value={progress} className="mb-4" />
          </CardHeader>
        </Card>

        <Card className="mb-6">
          <CardContent className="p-8">
            <div className="mb-8">
              <div className="flex items-start justify-between mb-6">
                <h2 className="text-xl font-semibold text-gray-900 flex-1 mr-4">
                  {currentQuestion.question}
                </h2>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={toggleBookmark}
                  className={bookmarkedQuestions.has(quiz.currentQuestionIndex) ? 'bg-yellow-50' : ''}
                >
                  <Bookmark className={`h-4 w-4 ${
                    bookmarkedQuestions.has(quiz.currentQuestionIndex) ? 'fill-yellow-500 text-yellow-500' : ''
                  }`} />
                </Button>
              </div>
              
              <RadioGroup value={selectedAnswer} onValueChange={handleAnswerChange}>
                <div className="space-y-3">
                  {currentQuestion.options.map((option, index) => (
                    <div key={index} className="flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                      <RadioGroupItem value={option} id={`option-${index}`} />
                      <Label htmlFor={`option-${index}`} className="flex-1 cursor-pointer">
                        {option}
                      </Label>
                    </div>
                  ))}
                </div>
              </RadioGroup>
            </div>

            <div className="flex justify-between items-center">
              <Button
                variant="outline"
                onClick={handlePrevious}
                disabled={quiz.currentQuestionIndex === 0}
              >
                <ChevronLeft className="mr-2 h-4 w-4" />
                Previous
              </Button>
              
              <Button onClick={handleNext} className="bg-primary hover:bg-primary/90">
                {quiz.currentQuestionIndex === quiz.questions.length - 1 ? 'Finish Quiz' : 'Next'}
                <ChevronRight className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Question Navigation</h3>
            <div className="grid grid-cols-5 md:grid-cols-10 gap-2 mb-4">
              {quiz.questions.map((_, index) => {
                const status = getQuestionStatus(index);
                return (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    className={`h-10 ${
                      status === 'current' ? 'bg-primary text-white border-primary' :
                      status === 'answered' ? 'bg-green-50 border-green-500 text-green-700' :
                      'border-gray-300'
                    }`}
                    onClick={() => quiz.goToQuestion(index)}
                  >
                    {index + 1}
                  </Button>
                );
              })}
            </div>
            
            <div className="flex items-center justify-center space-x-6 text-sm">
              <div className="flex items-center">
                <div className="w-4 h-4 bg-primary rounded mr-2"></div>
                <span className="text-gray-600">Current</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-green-500 rounded mr-2"></div>
                <span className="text-gray-600">Answered</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-gray-300 rounded mr-2"></div>
                <span className="text-gray-600">Not Answered</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

========================================
15. CLIENT/SRC/PAGES/RESULTS.TSX
========================================
import { useEffect, useState } from 'react';
import { useLocation } from 'wouter';
import { Trophy, Check, X, Clock, Download, RotateCcw, Home, Share, Award } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Header } from '@/components/header';
import { PerformanceChart } from '@/components/performance-chart';
import { getUser, getQuizHistory, type QuizResult } from '@/lib/storage';

export default function Results() {
  const [, setLocation] = useLocation();
  const [latestQuiz, setLatestQuiz] = useState<QuizResult | null>(null);
  const [previousQuizzes, setPreviousQuizzes] = useState<QuizResult[]>([]);

  const user = getUser();

  useEffect(() => {
    if (!user) {
      setLocation('/');
      return;
    }

    const history = getQuizHistory();
    if (history.length === 0) {
      setLocation('/dashboard');
      return;
    }

    const latest = history[history.length - 1];
    setLatestQuiz(latest);
    setPreviousQuizzes(history.slice(0, -1));
  }, []);

  if (!user || !latestQuiz) {
    return null;
  }

  const getPerformanceFeedback = (percentage: number) => {
    if (percentage >= 90) return { grade: 'A+', message: 'Outstanding! You have mastered this topic.' };
    if (percentage >= 80) return { grade: 'A', message: 'Excellent work! You have a strong understanding.' };
    if (percentage >= 70) return { grade: 'B+', message: 'Good job! Keep practicing to improve further.' };
    if (percentage >= 60) return { grade: 'B', message: 'Decent performance. Review the missed topics.' };
    if (percentage >= 50) return { grade: 'C', message: 'You passed, but there\'s room for improvement.' };
    return { grade: 'F', message: 'Don\'t give up! Practice more and try again.' };
  };

  const feedback = getPerformanceFeedback(latestQuiz.percentage);

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}m ${remainingSeconds}s`;
  };

  const averageTimePerQuestion = Math.round(latestQuiz.totalTime / latestQuiz.totalQuestions);

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center mb-8">
          <div className="w-24 h-24 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <Trophy className="text-white text-3xl" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Quiz Completed!</h1>
          <p className="text-gray-600">
            Great job on completing the <span className="font-semibold">{latestQuiz.topic}</span> quiz
          </p>
        </div>

        <Card className="mb-8">
          <CardContent className="p-8">
            <div className="text-center mb-8">
              <div className="relative inline-block">
                <div className="w-32 h-32 bg-gradient-to-r from-primary to-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-3xl font-bold text-white">{latestQuiz.percentage}%</span>
                </div>
                <div className="absolute -bottom-2 -right-2 w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                  <Check className="text-white h-5 w-5" />
                </div>
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">{feedback.message}</h2>
              <p className="text-gray-600">
                You scored <span className="font-semibold">{latestQuiz.correctAnswers} out of {latestQuiz.totalQuestions}</span> questions correctly
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center p-6 bg-green-50 rounded-xl">
                <div className="w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mx-auto mb-3">
                  <Check className="text-white h-6 w-6" />
                </div>
                <p className="text-2xl font-bold text-green-600">{latestQuiz.correctAnswers}</p>
                <p className="text-sm text-gray-600">Correct Answers</p>
              </div>
              <div className="text-center p-6 bg-red-50 rounded-xl">
                <div className="w-12 h-12 bg-red-500 rounded-lg flex items-center justify-center mx-auto mb-3">
                  <X className="text-white h-6 w-6" />
                </div>
                <p className="text-2xl font-bold text-red-600">{latestQuiz.incorrectAnswers}</p>
                <p className="text-sm text-gray-600">Incorrect Answers</p>
              </div>
              <div className="text-center p-6 bg-yellow-50 rounded-xl">
                <div className="w-12 h-12 bg-yellow-500 rounded-lg flex items-center justify-center mx-auto mb-3">
                  <Clock className="text-white h-6 w-6" />
                </div>
                <p className="text-2xl font-bold text-yellow-600">{latestQuiz.unansweredQuestions}</p>
                <p className="text-sm text-gray-600">Unanswered</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="text-2xl font-bold">Performance Analysis</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="mb-8">
              <PerformanceChart quizResult={latestQuiz} />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="p-6 border border-gray-200 rounded-lg">
                <h3 className="font-semibold text-gray-900 mb-4">Time Statistics</h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Total Time:</span>
                    <span className="font-medium">{formatTime(latestQuiz.totalTime)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Average per Question:</span>
                    <span className="font-medium">{formatTime(averageTimePerQuestion)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Completion Date:</span>
                    <span className="font-medium">
                      {new Date(latestQuiz.completedAt).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>
              
              <div className="p-6 border border-gray-200 rounded-lg">
                <h3 className="font-semibold text-gray-900 mb-4">Grade & Feedback</h3>
                <div className="text-center">
                  <div className="inline-block bg-primary text-white px-8 py-4 rounded-xl mb-3">
                    <span className="text-4xl font-bold">{feedback.grade}</span>
                  </div>
                  <p className="text-gray-600">{feedback.message}</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <Button 
            onClick={() => setLocation(`/quiz?topic=${encodeURIComponent(latestQuiz.topic)}`)}
            className="bg-primary hover:bg-primary/90"
          >
            <RotateCcw className="mr-2 h-4 w-4" />
            Retake Quiz
          </Button>
          <Button 
            onClick={() => setLocation('/report')}
            className="bg-green-600 hover:bg-green-700"
          >
            <Download className="mr-2 h-4 w-4" />
            View Report Card
          </Button>
          <Button 
            onClick={() => setLocation('/dashboard')}
            variant="outline"
          >
            <Home className="mr-2 h-4 w-4" />
            Back to Dashboard
          </Button>
        </div>
      </div>
    </div>
  );
}

========================================
16. CLIENT/SRC/PAGES/REPORT.TSX
========================================
import { useEffect, useState } from 'react';
import { useLocation } from 'wouter';
import { Download, Share, PrinterIcon, ArrowLeft, Trophy, Clock, Check, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Header } from '@/components/header';
import { getUser, getQuizHistory, type QuizResult } from '@/lib/storage';

export default function Report() {
  const [, setLocation] = useLocation();
  const [latestQuiz, setLatestQuiz] = useState<QuizResult | null>(null);

  const user = getUser();

  useEffect(() => {
    if (!user) {
      setLocation('/');
      return;
    }

    const history = getQuizHistory();
    if (history.length === 0) {
      setLocation('/dashboard');
      return;
    }

    const latest = history[history.length - 1];
    if (!latestQuiz || latestQuiz.completedAt !== latest.completedAt) {
      setLatestQuiz(latest);
    }
  }, [user, setLocation, latestQuiz]);

  if (!user || !latestQuiz) {
    return null;
  }

  const getGrade = (percentage: number) => {
    if (percentage >= 90) return 'A+';
    if (percentage >= 80) return 'A';
    if (percentage >= 70) return 'B+';
    if (percentage >= 60) return 'B';
    if (percentage >= 50) return 'C';
    return 'F';
  };

  const getGradeColor = (percentage: number) => {
    if (percentage >= 80) return 'text-green-600';
    if (percentage >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}m ${remainingSeconds}s`;
  };

  const handlePrint = () => {
    window.print();
  };

  const handleDownload = () => {
    const reportContent = document.getElementById('report-content');
    if (reportContent) {
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(`
          <html>
            <head>
              <title>Quiz Report - ${latestQuiz.topic}</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .grade { font-size: 48px; font-weight: bold; color: #3b82f6; }
                .stats { display: flex; justify-content: space-around; margin: 20px 0; }
                .stat { text-align: center; }
                .stat-value { font-size: 24px; font-weight: bold; }
                .stat-label { color: #666; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; }
              </style>
            </head>
            <body>
              ${reportContent.innerHTML}
            </body>
          </html>
        `);
        printWindow.document.close();
        printWindow.print();
      }
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-6 flex items-center justify-between print:hidden">
          <Button
            variant="outline"
            onClick={() => setLocation('/results')}
            className="flex items-center"
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Results
          </Button>
          
          <div className="flex gap-2">
            <Button variant="outline" onClick={handlePrint}>
              <PrinterIcon className="mr-2 h-4 w-4" />
              Print
            </Button>
            <Button variant="outline" onClick={handleDownload}>
              <Download className="mr-2 h-4 w-4" />
              Download
            </Button>
          </div>
        </div>

        <Card className="shadow-lg print:shadow-none print:border-0">
          <CardContent className="p-8" id="report-content">
            <div className="text-center mb-8">
              <div className="w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4">
                <Trophy className="text-white text-2xl" />
              </div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">Quiz Report Card</h1>
              <p className="text-gray-600">Official Performance Report</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Student Information</h2>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Name:</span>
                    <span className="font-medium">{user.name}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Email:</span>
                    <span className="font-medium">{user.email}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Quiz Topic:</span>
                    <span className="font-medium">{latestQuiz.topic}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Date Completed:</span>
                    <span className="font-medium">
                      {new Date(latestQuiz.completedAt).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>

              <div className="text-center">
                <h2 className="text-xl font-semibold text-gray-900 mb-4">Final Grade</h2>
                <div className="bg-gradient-to-r from-primary to-blue-600 text-white rounded-2xl p-8">
                  <div className="text-6xl font-bold mb-2">{getGrade(latestQuiz.percentage)}</div>
                  <div className="text-2xl font-semibold">{latestQuiz.percentage}%</div>
                </div>
              </div>
            </div>

            <Separator className="my-8" />

            <div className="mb-8">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">Performance Summary</h2>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">{latestQuiz.totalQuestions}</div>
                  <div className="text-sm text-gray-600">Total Questions</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">{latestQuiz.correctAnswers}</div>
                  <div className="text-sm text-gray-600">Correct Answers</div>
                </div>
                <div className="text-center p-4 bg-red-50 rounded-lg">
                  <div className="text-2xl font-bold text-red-600">{latestQuiz.incorrectAnswers}</div>
                  <div className="text-sm text-gray-600">Incorrect Answers</div>
                </div>
                <div className="text-center p-4 bg-yellow-50 rounded-lg">
                  <div className="text-2xl font-bold text-yellow-600">{latestQuiz.unansweredQuestions}</div>
                  <div className="text-sm text-gray-600">Unanswered</div>
                </div>
              </div>
            </div>

            <div className="mb-8">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">Time Analysis</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="p-4 border border-gray-200 rounded-lg">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">Total Time Taken:</span>
                    <span className="font-medium">{formatTime(latestQuiz.totalTime)}</span>
                  </div>
                </div>
                <div className="p-4 border border-gray-200 rounded-lg">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">Average per Question:</span>
                    <span className="font-medium">{formatTime(Math.round(latestQuiz.totalTime / latestQuiz.totalQuestions))}</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="mb-8">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">Performance Feedback</h2>
              <div className="p-6 bg-gray-50 rounded-lg">
                <div className="flex items-center mb-4">
                  <div className={`text-4xl font-bold mr-4 ${getGradeColor(latestQuiz.percentage)}`}>
                    {getGrade(latestQuiz.percentage)}
                  </div>
                  <div>
                    <div className="text-lg font-semibold text-gray-900">
                      {latestQuiz.percentage >= 90 ? 'Outstanding Performance!' :
                       latestQuiz.percentage >= 80 ? 'Excellent Work!' :
                       latestQuiz.percentage >= 70 ? 'Good Job!' :
                       latestQuiz.percentage >= 60 ? 'Satisfactory Performance' :
                       latestQuiz.percentage >= 50 ? 'Needs Improvement' :
                       'Requires Significant Study'}
                    </div>
                    <div className="text-gray-600">
                      {latestQuiz.percentage >= 90 ? 'You have mastered this topic completely.' :
                       latestQuiz.percentage >= 80 ? 'You have a strong understanding of the material.' :
                       latestQuiz.percentage >= 70 ? 'Keep practicing to improve further.' :
                       latestQuiz.percentage >= 60 ? 'Review the topics you missed.' :
                       latestQuiz.percentage >= 50 ? 'Consider additional study and practice.' :
                       'Focus on understanding the fundamental concepts.'}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="text-center text-sm text-gray-500 mt-8 print:block">
              <p>Generated by QuizMaster Application</p>
              <p>Report generated on {new Date().toLocaleDateString()}</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

========================================
17. CLIENT/SRC/PAGES/NOT-FOUND.TSX
========================================
import { useLocation } from 'wouter';
import { Home, ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

export default function NotFound() {
  const [, setLocation] = useLocation();

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
      <Card className="w-full max-w-md">
        <CardContent className="p-8 text-center">
          <div className="w-20 h-20 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
            <span className="text-4xl">🔍</span>
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Page Not Found</h1>
          <p className="text-gray-600 mb-8">
            The page you're looking for doesn't exist or has been moved.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button onClick={() => setLocation('/dashboard')} className="bg-primary hover:bg-primary/90">
              <Home className="mr-2 h-4 w-4" />
              Go to Dashboard
            </Button>
            <Button onClick={() => window.history.back()} variant="outline">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Go Back
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

========================================
18. CLIENT/SRC/COMPONENTS/HEADER.TSX
========================================
import { useLocation } from 'wouter';
import { LogOut, User, Trophy, Home } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { getUser, clearUser } from '@/lib/storage';

export function Header() {
  const [, setLocation] = useLocation();
  const user = getUser();

  const handleLogout = () => {
    clearUser();
    setLocation('/');
  };

  if (!user) {
    return null;
  }

  return (
    <header className="bg-white shadow-sm border-b border-gray-200">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center">
            <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center mr-3">
              <Trophy className="text-white h-5 w-5" />
            </div>
            <h1 className="text-xl font-bold text-gray-900">QuizMaster</h1>
          </div>

          <nav className="flex items-center space-x-4">
            <Button
              variant="ghost"
              onClick={() => setLocation('/dashboard')}
              className="flex items-center"
            >
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>

            <div className="flex items-center space-x-3">
              <div className="flex items-center space-x-2">
                <User className="h-5 w-5 text-gray-600" />
                <span className="text-sm font-medium text-gray-700">{user.name}</span>
              </div>
              
              <Button
                variant="outline"
                size="sm"
                onClick={handleLogout}
                className="flex items-center"
              >
                <LogOut className="mr-2 h-4 w-4" />
                Logout
              </Button>
            </div>
          </nav>
        </div>
      </div>
    </header>
  );
}

========================================
19. CLIENT/SRC/COMPONENTS/QUIZ-TIMER.TSX
========================================
import { useState, useEffect } from 'react';
import { Clock } from 'lucide-react';

interface QuizTimerProps {
  duration: number; // in seconds
  onTimeUp: () => void;
  onTimeSpent: (timeSpent: number) => void;
  isActive: boolean;
  reset?: boolean;
}

export function QuizTimer({ duration, onTimeUp, onTimeSpent, isActive, reset }: QuizTimerProps) {
  const [timeRemaining, setTimeRemaining] = useState(duration);
  const [startTime, setStartTime] = useState(Date.now());

  useEffect(() => {
    if (reset) {
      setTimeRemaining(duration);
      setStartTime(Date.now());
    }
  }, [reset, duration]);

  useEffect(() => {
    if (!isActive) return;

    const interval = setInterval(() => {
      setTimeRemaining((prev) => {
        if (prev <= 1) {
          const timeSpent = Math.round((Date.now() - startTime) / 1000);
          onTimeSpent(timeSpent);
          onTimeUp();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [isActive, onTimeUp, onTimeSpent, startTime]);

  useEffect(() => {
    return () => {
      if (timeRemaining < duration) {
        const timeSpent = Math.round((Date.now() - startTime) / 1000);
        onTimeSpent(timeSpent);
      }
    };
  }, []);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const percentage = (timeRemaining / duration) * 100;
  const getTimerColor = () => {
    if (timeRemaining <= 10) return 'bg-red-500';
    if (timeRemaining <= 20) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  return (
    <div className="flex items-center justify-between">
      <div>
        <p className="text-sm text-gray-600">Time Remaining</p>
        <div className="flex items-center space-x-2">
          <Clock className="h-5 w-5 text-primary" />
          <p className={`text-2xl font-bold ${timeRemaining <= 10 ? 'text-red-500' : 'text-primary'}`}>
            {formatTime(timeRemaining)}
          </p>
        </div>
      </div>
      
      <div className="w-full max-w-xs ml-4">
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div
            className={`h-2 rounded-full transition-all duration-1000 ${getTimerColor()}`}
            style={{ width: `${percentage}%` }}
          />
        </div>
      </div>
    </div>
  );
}

========================================
20. CLIENT/SRC/COMPONENTS/PERFORMANCE-CHART.TSX
========================================
import { useEffect, useRef } from 'react';
import { getQuizHistory, type QuizResult } from '@/lib/storage';

interface PerformanceChartProps {
  quizResult?: QuizResult;
}

export function PerformanceChart({ quizResult }: PerformanceChartProps) {
  const chartRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    if (!chartRef.current) return;

    const canvas = chartRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const history = getQuizHistory();
    const data = quizResult ? [...history, quizResult] : history;
    
    if (data.length === 0) return;

    const padding = 40;
    const chartWidth = canvas.width - 2 * padding;
    const chartHeight = canvas.height - 2 * padding;

    ctx.fillStyle = '#f8fafc';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    ctx.strokeStyle = '#e2e8f0';
    ctx.lineWidth = 1;

    for (let i = 0; i <= 5; i++) {
      const y = padding + (chartHeight / 5) * i;
      ctx.beginPath();
      ctx.moveTo(padding, y);
      ctx.lineTo(canvas.width - padding, y);
      ctx.stroke();
    }

    const maxPoints = Math.min(data.length, 10);
    for (let i = 0; i <= maxPoints; i++) {
      const x = padding + (chartWidth / maxPoints) * i;
      ctx.beginPath();
      ctx.moveTo(x, padding);
      ctx.lineTo(x, canvas.height - padding);
      ctx.stroke();
    }

    ctx.strokeStyle = '#374151';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, canvas.height - padding);
    ctx.lineTo(canvas.width - padding, canvas.height - padding);
    ctx.stroke();

    ctx.fillStyle = '#6b7280';
    ctx.font = '12px Inter, sans-serif';
    ctx.textAlign = 'right';
    for (let i = 0; i <= 5; i++) {
      const value = 100 - (i * 20);
      const y = padding + (chartHeight / 5) * i;
      ctx.fillText(`${value}%`, padding - 10, y + 4);
    }

    if (data.length > 1) {
      const recentData = data.slice(-10);
      ctx.strokeStyle = '#3b82f6';
      ctx.lineWidth = 3;
      ctx.beginPath();

      recentData.forEach((quiz, index) => {
        const x = padding + (chartWidth / (recentData.length - 1)) * index;
        const y = canvas.height - padding - (quiz.percentage / 100) * chartHeight;
        
        if (index === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      });
      
      ctx.stroke();

      ctx.fillStyle = '#3b82f6';
      recentData.forEach((quiz, index) => {
        const x = padding + (chartWidth / (recentData.length - 1)) * index;
        const y = canvas.height - padding - (quiz.percentage / 100) * chartHeight;
        
        ctx.beginPath();
        ctx.arc(x, y, 4, 0, Math.PI * 2);
        ctx.fill();
      });

      if (quizResult) {
        const lastIndex = recentData.length - 1;
        const x = padding + (chartWidth / (recentData.length - 1)) * lastIndex;
        const y = canvas.height - padding - (quizResult.percentage / 100) * chartHeight;
        
        ctx.strokeStyle = '#ef4444';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(x, y, 6, 0, Math.PI * 2);
        ctx.stroke();
      }
    }

    ctx.fillStyle = '#111827';
    ctx.font = 'bold 16px Inter, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('Performance Over Time', canvas.width / 2, 25);

  }, [quizResult]);

  return (
    <div className="w-full h-64 bg-gray-50 rounded-lg p-4">
      <canvas
        ref={chartRef}
        width={600}
        height={250}
        className="w-full h-full"
        style={{ maxWidth: '100%' }}
      />
    </div>
  );
}

========================================
21. CLIENT/SRC/LIB/STORAGE.TS
========================================
export interface UserData {
  id: number;
  name: string;
  email: string;
}

export interface QuizProgress {
  topic: string;
  currentQuestion: number;
  totalQuestions: number;
  answers: Record<number, string>;
  timeSpent: Record<number, number>;
  startTime: number;
}

export interface QuizResult {
  topic: string;
  totalQuestions: number;
  correctAnswers: number;
  incorrectAnswers: number;
  unansweredQuestions: number;
  totalTime: number;
  percentage: number;
  completedAt: string;
}

export interface QuizStats {
  completed: number;
  avgScore: number;
  timeSaved: string;
  streak: number;
}

const STORAGE_KEYS = {
  USER: 'quizmaster_user',
  QUIZ_PROGRESS: 'quizmaster_quiz_progress',
  QUIZ_HISTORY: 'quizmaster_quiz_history',
  QUIZ_STATS: 'quizmaster_quiz_stats',
} as const;

export function saveUser(user: UserData): void {
  localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(user));
}

export function getUser(): UserData | null {
  const userData = localStorage.getItem(STORAGE_KEYS.USER);
  return userData ? JSON.parse(userData) : null;
}

export function clearUser(): void {
  localStorage.removeItem(STORAGE_KEYS.USER);
}

export function saveQuizProgress(progress: QuizProgress): void {
  localStorage.setItem(STORAGE_KEYS.QUIZ_PROGRESS, JSON.stringify(progress));
}

export function getQuizProgress(): QuizProgress | null {
  const progress = localStorage.getItem(STORAGE_KEYS.QUIZ_PROGRESS);
  return progress ? JSON.parse(progress) : null;
}

export function clearQuizProgress(): void {
  localStorage.removeItem(STORAGE_KEYS.QUIZ_PROGRESS);
}

export function saveQuizResult(result: QuizResult): void {
  const history = getQuizHistory();
  history.push(result);
  localStorage.setItem(STORAGE_KEYS.QUIZ_HISTORY, JSON.stringify(history));
  
  updateQuizStats(result);
}

export function getQuizHistory(): QuizResult[] {
  const history = localStorage.getItem(STORAGE_KEYS.QUIZ_HISTORY);
  return history ? JSON.parse(history) : [];
}

export function getQuizStats(): QuizStats {
  const stats = localStorage.getItem(STORAGE_KEYS.QUIZ_STATS);
  if (stats) {
    return JSON.parse(stats);
  }
  
  const history = getQuizHistory();
  return calculateStats(history);
}

function updateQuizStats(newResult: QuizResult): void {
  const history = getQuizHistory();
  const stats = calculateStats(history);
  localStorage.setItem(STORAGE_KEYS.QUIZ_STATS, JSON.stringify(stats));
}

function calculateStats(history: QuizResult[]): QuizStats {
  if (history.length === 0) {
    return {
      completed: 0,
      avgScore: 0,
      timeSaved: "0m",
      streak: 0,
    };
  }
  
  const totalScore = history.reduce((sum, quiz) => sum + quiz.percentage, 0);
  const avgScore = Math.round(totalScore / history.length);
  
  const totalTime = history.reduce((sum, quiz) => sum + quiz.totalTime, 0);
  const timeSavedMinutes = Math.round(totalTime / 60);
  const timeSaved = timeSavedMinutes >= 60 
    ? `${Math.floor(timeSavedMinutes / 60)}h ${timeSavedMinutes % 60}m`
    : `${timeSavedMinutes}m`;
  
  const streak = calculateCurrentStreak(history);
  
  return {
    completed: history.length,
    avgScore,
    timeSaved,
    streak,
  };
}

function calculateCurrentStreak(history: QuizResult[]): number {
  if (history.length === 0) return 0;
  
  const sortedHistory = [...history].sort((a, b) => 
    new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime()
  );
  
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  let streak = 0;
  let currentDate = new Date(today);
  
  for (const quiz of sortedHistory) {
    const quizDate = new Date(quiz.completedAt);
    quizDate.setHours(0, 0, 0, 0);
    
    if (quizDate.getTime() === currentDate.getTime()) {
      streak++;
      currentDate.setDate(currentDate.getDate() - 1);
    } else if (quizDate.getTime() < currentDate.getTime()) {
      break;
    }
  }
  
  return streak;
}

========================================
22. CLIENT/SRC/LIB/QUIZ-API.TS
========================================
export interface TriviaQuestion {
  category: string;
  type: 'multiple' | 'boolean';
  difficulty: 'easy' | 'medium' | 'hard';
  question: string;
  correct_answer: string;
  incorrect_answers: string[];
}

export interface TriviaResponse {
  response_code: number;
  results: TriviaQuestion[];
}

export interface QuizQuestion {
  id: number;
  question: string;
  options: string[];
  correctAnswer: string;
  category: string;
  difficulty: string;
}

const TOPIC_CATEGORIES: Record<string, number> = {
  'general': 9,
  'science': 17,
  'computer': 18,
  'mathematics': 19,
  'sports': 21,
  'geography': 22,
  'history': 23,
  'politics': 24,
  'art': 25,
  'celebrities': 26,
  'animals': 27,
  'vehicles': 28,
  'comics': 29,
  'gadgets': 30,
  'anime': 31,
  'cartoon': 32,
};

export async function fetchQuizQuestions(topic: string, amount: number = 10): Promise<QuizQuestion[]> {
  try {
    let categoryId = TOPIC_CATEGORIES[topic.toLowerCase()];
    
    const programmingTopics = ['javascript', 'python', 'java', 'react', 'html', 'css', 'programming', 'coding'];
    if (!categoryId && programmingTopics.some(prog => topic.toLowerCase().includes(prog))) {
      categoryId = 18;
    }
    
    let apiUrl = `https://opentdb.com/api.php?amount=${amount}&type=multiple`;
    if (categoryId) {
      apiUrl += `&category=${categoryId}`;
    }
    
    const response = await fetch(apiUrl);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data: TriviaResponse = await response.json();
    
    if (data.response_code !== 0) {
      throw new Error(`API error! response_code: ${data.response_code}`);
    }
    
    return data.results.map((item, index) => {
      const options = [...item.incorrect_answers, item.correct_answer];
      for (let i = options.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [options[i], options[j]] = [options[j], options[i]];
      }
      
      return {
        id: index + 1,
        question: decodeHTMLEntities(item.question),
        options: options.map(decodeHTMLEntities),
        correctAnswer: decodeHTMLEntities(item.correct_answer),
        category: item.category,
        difficulty: item.difficulty,
      };
    });
  } catch (error) {
    console.error('Failed to fetch quiz questions:', error);
    return generateFallbackQuestions(topic, amount);
  }
}

function decodeHTMLEntities(text: string): string {
  const textarea = document.createElement('textarea');
  textarea.innerHTML = text;
  return textarea.value;
}

function generateFallbackQuestions(topic: string, amount: number): QuizQuestion[] {
  const fallbackQuestions: QuizQuestion[] = [
    {
      id: 1,
      question: `What is the primary characteristic of ${topic}?`,
      options: ["Dynamic typing", "Static typing", "No typing", "Strong typing"],
      correctAnswer: "Dynamic typing",
      category: "General Knowledge",
      difficulty: "medium"
    },
    {
      id: 2,
      question: `Which of these is commonly used in ${topic}?`,
      options: ["Variables", "Constants", "Functions", "All of the above"],
      correctAnswer: "All of the above",
      category: "General Knowledge", 
      difficulty: "easy"
    },
    {
      id: 3,
      question: `${topic} is primarily used for?`,
      options: ["Web development", "Mobile apps", "Desktop apps", "All platforms"],
      correctAnswer: "All platforms",
      category: "General Knowledge",
      difficulty: "medium"
    }
  ];
  
  return fallbackQuestions.slice(0, amount);
}

export async function getTopicSuggestions(): Promise<string[]> {
  return [
    'JavaScript',
    'Python', 
    'Java',
    'React',
    'HTML & CSS',
    'Science',
    'History',
    'Geography',
    'Sports',
    'Mathematics'
  ];
}

========================================
23. CLIENT/SRC/LIB/QUERYCLIENT.TS
========================================
import { QueryClient } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = await res.text();
    throw new Error(`HTTP ${res.status}: ${text}`);
  }
}

export async function apiRequest(
  url: string,
  options: RequestInit = {}
): Promise<Response> {
  const res = await fetch(url, {
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
  
  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";

export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => (context: { queryKey: readonly [string, ...unknown[]] }) => Promise<T | null> = ({
  on401,
}) => {
  return async ({ queryKey }) => {
    const [url] = queryKey;
    try {
      const res = await apiRequest(url);
      return res.json() as Promise<T>;
    } catch (error) {
      if (error instanceof Error && error.message.includes("401")) {
        if (on401 === "returnNull") {
          return null;
        }
        throw error;
      }
      throw error;
    }
  };
};

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      retry: (failureCount, error) => {
        if (error instanceof Error && error.message.includes("401")) {
          return false;
        }
        return failureCount < 3;
      },
    },
  },
});

========================================
24. CLIENT/SRC/LIB/UTILS.TS
========================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

========================================
25. CLIENT/SRC/HOOKS/USE-QUIZ.TS
========================================
import { useState, useEffect, useCallback } from 'react';
import { fetchQuizQuestions, type QuizQuestion } from '@/lib/quiz-api';
import { saveQuizProgress, getQuizProgress, clearQuizProgress, saveQuizResult, type QuizProgress } from '@/lib/storage';

export interface QuizState {
  questions: QuizQuestion[];
  currentQuestionIndex: number;
  answers: Record<number, string>;
  timeSpent: Record<number, number>;
  isLoading: boolean;
  error: string | null;
  isCompleted: boolean;
  startTime: number;
}

export interface QuizActions {
  startQuiz: (topic: string) => Promise<void>;
  answerQuestion: (answer: string) => void;
  goToQuestion: (index: number) => void;
  nextQuestion: () => void;
  previousQuestion: () => void;
  submitQuiz: () => void;
  recordTimeSpent: (questionIndex: number, timeSpent: number) => void;
}

export function useQuiz(): QuizState & QuizActions {
  const [questions, setQuestions] = useState<QuizQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [timeSpent, setTimeSpent] = useState<Record<number, number>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isCompleted, setIsCompleted] = useState(false);
  const [startTime, setStartTime] = useState(0);
  const [topic, setTopic] = useState('');

  useEffect(() => {
    const savedProgress = getQuizProgress();
    if (savedProgress) {
      loadSavedProgress(savedProgress);
    }
  }, []);

  useEffect(() => {
    if (questions.length > 0 && !isCompleted) {
      const progress: QuizProgress = {
        topic,
        currentQuestion: currentQuestionIndex,
        totalQuestions: questions.length,
        answers,
        timeSpent,
        startTime,
      };
      saveQuizProgress(progress);
    }
  }, [questions, currentQuestionIndex, answers, timeSpent, startTime, topic, isCompleted]);

  const loadSavedProgress = (progress: QuizProgress) => {
    setTopic(progress.topic);
    setCurrentQuestionIndex(progress.currentQuestion);
    setAnswers(progress.answers);
    setTimeSpent(progress.timeSpent);
    setStartTime(progress.startTime);
  };

  const startQuiz = useCallback(async (quizTopic: string) => {
    setIsLoading(true);
    setError(null);
    setTopic(quizTopic);
    
    try {
      const quizQuestions = await fetchQuizQuestions(quizTopic, 10);
      setQuestions(quizQuestions);
      setCurrentQuestionIndex(0);
      setAnswers({});
      setTimeSpent({});
      setIsCompleted(false);
      setStartTime(Date.now());
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load quiz questions');
    } finally {
      setIsLoading(false);
    }
  }, []);

  const answerQuestion = useCallback((answer: string) => {
    setAnswers(prev => ({
      ...prev,
      [currentQuestionIndex]: answer,
    }));
  }, [currentQuestionIndex]);

  const goToQuestion = useCallback((index: number) => {
    if (index >= 0 && index < questions.length) {
      setCurrentQuestionIndex(index);
    }
  }, [questions.length]);

  const nextQuestion = useCallback(() => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    } else {
      submitQuiz();
    }
  }, [currentQuestionIndex, questions.length]);

  const previousQuestion = useCallback(() => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(prev => prev - 1);
    }
  }, [currentQuestionIndex]);

  const recordTimeSpent = useCallback((questionIndex: number, time: number) => {
    setTimeSpent(prev => ({
      ...prev,
      [questionIndex]: time,
    }));
  }, []);

  const submitQuiz = useCallback(() => {
    if (questions.length === 0) return;

    let correctAnswers = 0;
    let incorrectAnswers = 0;
    let unansweredQuestions = 0;

    questions.forEach((question, index) => {
      const userAnswer = answers[index];
      if (!userAnswer) {
        unansweredQuestions++;
      } else if (userAnswer === question.correctAnswer) {
        correctAnswers++;
      } else {
        incorrectAnswers++;
      }
    });

    const totalTime = Math.round((Date.now() - startTime) / 1000);
    const percentage = Math.round((correctAnswers / questions.length) * 100);

    const result = {
      topic,
      totalQuestions: questions.length,
      correctAnswers,
      incorrectAnswers,
      unansweredQuestions,
      totalTime,
      percentage,
      completedAt: new Date().toISOString(),
    };

    saveQuizResult(result);
    clearQuizProgress();
    setIsCompleted(true);
  }, [questions, answers, startTime, topic]);

  return {
    questions,
    currentQuestionIndex,
    answers,
    timeSpent,
    isLoading,
    error,
    isCompleted,
    startTime,
    startQuiz,
    answerQuestion,
    goToQuestion,
    nextQuestion,
    previousQuestion,
    submitQuiz,
    recordTimeSpent,
  };
}

========================================
26. CLIENT/SRC/HOOKS/USE-TOAST.TS
========================================
// Copy the existing useToast hook from the original file
import { useEffect, useState } from "react";

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = useState<State>(memoryState);

  useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };

========================================
27. CLIENT/SRC/HOOKS/USE-MOBILE.TSX
========================================
import { useEffect, useState } from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = useState<boolean | undefined>(undefined);

  useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}

========================================
28. SERVER/INDEX.TS
========================================
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from './routes.js';
import { setupVite, serveStatic, log } from './vite.js';

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

(async () => {
  const server = await registerRoutes(app);
  
  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    
    log(`Error ${status}: ${message}`);
    res.status(status).json({ message: status === 500 ? "Internal Server Error" : message });
  });

  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  const PORT = 5000;
  server.listen(PORT, "0.0.0.0", () => {
    log(`serving on port ${PORT}`);
  });
})();

========================================
29. SERVER/ROUTES.TS
========================================
import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage.js";

export async function registerRoutes(app: Express): Promise<Server> {
  // Health check endpoint
  app.get("/api/health", (_req, res) => {
    res.json({ status: "ok" });
  });

  // User routes
  app.post("/api/auth/register", async (req, res) => {
    try {
      const { name, email, password } = req.body;
      
      // Check if user already exists
      const existingUser = await storage.getUserByEmail(email);
      if (existingUser) {
        return res.status(400).json({ message: "User already exists" });
      }

      const user = await storage.createUser({ name, email, password });
      res.json({ user: { id: user.id, name: user.name, email: user.email } });
    } catch (error) {
      res.status(500).json({ message: "Failed to create user" });
    }
  });

  app.post("/api/auth/login", async (req, res) => {
    try {
      const { email, password } = req.body;
      
      const user = await storage.getUserByEmail(email);
      if (!user) {
        return res.status(401).json({ message: "Invalid credentials" });
      }

      // Simple password check (in production, use proper hashing)
      if (user.password !== password) {
        return res.status(401).json({ message: "Invalid credentials" });
      }

      res.json({ user: { id: user.id, name: user.name, email: user.email } });
    } catch (error) {
      res.status(500).json({ message: "Failed to login" });
    }
  });

  // Quiz routes
  app.post("/api/quiz", async (req, res) => {
    try {
      const quiz = await storage.createQuiz(req.body);
      res.json(quiz);
    } catch (error) {
      res.status(500).json({ message: "Failed to create quiz" });
    }
  });

  app.get("/api/quiz/:id", async (req, res) => {
    try {
      const quiz = await storage.getQuiz(parseInt(req.params.id));
      if (!quiz) {
        return res.status(404).json({ message: "Quiz not found" });
      }
      res.json(quiz);
    } catch (error) {
      res.status(500).json({ message: "Failed to get quiz" });
    }
  });

  app.get("/api/user/:id/quizzes", async (req, res) => {
    try {
      const quizzes = await storage.getUserQuizzes(parseInt(req.params.id));
      res.json(quizzes);
    } catch (error) {
      res.status(500).json({ message: "Failed to get user quizzes" });
    }
  });

  // Question response routes
  app.post("/api/quiz/:id/responses", async (req, res) => {
    try {
      const response = await storage.createQuestionResponse({
        ...req.body,
        quizId: parseInt(req.params.id),
      });
      res.json(response);
    } catch (error) {
      res.status(500).json({ message: "Failed to create response" });
    }
  });

  app.get("/api/quiz/:id/responses", async (req, res) => {
    try {
      const responses = await storage.getQuizResponses(parseInt(req.params.id));
      res.json(responses);
    } catch (error) {
      res.status(500).json({ message: "Failed to get responses" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}

========================================
30. SERVER/STORAGE.TS
========================================
import type { User, Quiz, QuestionResponse, InsertUser, InsertQuiz, InsertQuestionResponse } from "../shared/schema.js";

export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Quiz operations
  createQuiz(quiz: InsertQuiz): Promise<Quiz>;
  getUserQuizzes(userId: number): Promise<Quiz[]>;
  getQuiz(id: number): Promise<Quiz | undefined>;
  
  // Question response operations
  createQuestionResponse(response: InsertQuestionResponse): Promise<QuestionResponse>;
  getQuizResponses(quizId: number): Promise<QuestionResponse[]>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User> = new Map();
  private quizzes: Map<number, Quiz> = new Map();
  private questionResponses: Map<number, QuestionResponse> = new Map();
  private currentUserId: number = 1;
  private currentQuizId: number = 1;
  private currentResponseId: number = 1;

  constructor() {
    // Initialize with sample data
    this.users.set(1, {
      id: 1,
      name: "Demo User",
      email: "demo@example.com",
      password: "password123",
      createdAt: new Date(),
      updatedAt: new Date(),
    });
    this.currentUserId = 2;
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    for (const user of this.users.values()) {
      if (user.email === email) {
        return user;
      }
    }
    return undefined;
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentUserId++;
    const now = new Date();
    const user: User = { 
      ...insertUser, 
      id, 
      createdAt: now, 
      updatedAt: now 
    };
    this.users.set(id, user);
    return user;
  }

  async createQuiz(insertQuiz: InsertQuiz): Promise<Quiz> {
    const id = this.currentQuizId++;
    const now = new Date();
    const quiz: Quiz = { 
      ...insertQuiz, 
      id, 
      createdAt: now, 
      updatedAt: now 
    };
    this.quizzes.set(id, quiz);
    return quiz;
  }

  async getUserQuizzes(userId: number): Promise<Quiz[]> {
    const userQuizzes: Quiz[] = [];
    for (const quiz of this.quizzes.values()) {
      if (quiz.userId === userId) {
        userQuizzes.push(quiz);
      }
    }
    return userQuizzes;
  }

  async getQuiz(id: number): Promise<Quiz | undefined> {
    return this.quizzes.get(id);
  }

  async createQuestionResponse(insertResponse: InsertQuestionResponse): Promise<QuestionResponse> {
    const id = this.currentResponseId++;
    const response: QuestionResponse = { 
      ...insertResponse, 
      id,
      userAnswer: insertResponse.userAnswer || null
    };
    this.questionResponses.set(id, response);
    return response;
  }

  async getQuizResponses(quizId: number): Promise<QuestionResponse[]> {
    const responses: QuestionResponse[] = [];
    for (const response of this.questionResponses.values()) {
      if (response.quizId === quizId) {
        responses.push(response);
      }
    }
    return responses;
  }
}

export const storage = new MemStorage();

========================================
31. SERVER/VITE.TS
========================================
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import type { Express } from "express";
import type { Server } from "http";
import { createServer as createViteServer } from "vite";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

export function log(message: string, source = "express") {
  const timestamp = new Date().toLocaleTimeString("en-US", { hour12: false });
  console.log(`${timestamp} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const vite = await createViteServer({
    server: { middlewareMode: true },
    appType: "spa",
    root: path.resolve(__dirname, "../client"),
  });

  app.use(vite.ssrFixStacktrace);
  app.use(vite.middlewares);

  app.use("*", async (req, res, next) => {
    if (req.originalUrl.startsWith("/api/")) {
      return next();
    }

    try {
      const url = req.originalUrl;
      let template = fs.readFileSync(path.resolve(__dirname, "../client/index.html"), "utf-8");
      template = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(template);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(__dirname, "../dist/public");
  if (!fs.existsSync(distPath)) {
    throw new Error(`Static files not found at ${distPath}. Run 'npm run build' first.`);
  }

  app.use(express.static(distPath));
  app.get("*", (req, res) => {
    if (req.path.startsWith("/api/")) {
      return res.status(404).json({ message: "API endpoint not found" });
    }
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}

========================================
32. SHARED/SCHEMA.TS
========================================
import { pgTable, serial, varchar, text, integer, boolean, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  email: varchar("email", { length: 255 }).notNull().unique(),
  password: varchar("password", { length: 255 }).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const quizzes = pgTable("quizzes", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id).notNull(),
  topic: varchar("topic", { length: 255 }).notNull(),
  totalQuestions: integer("total_questions").notNull(),
  correctAnswers: integer("correct_answers").notNull(),
  totalTime: integer("total_time").notNull(), // in seconds
  percentage: integer("percentage").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const questionResponses = pgTable("question_responses", {
  id: serial("id").primaryKey(),
  quizId: integer("quiz_id").references(() => quizzes.id).notNull(),
  questionText: text("question_text").notNull(),
  userAnswer: varchar("user_answer", { length: 1000 }),
  correctAnswer: varchar("correct_answer", { length: 1000 }).notNull(),
  isCorrect: boolean("is_correct").notNull(),
  timeSpent: integer("time_spent").notNull(), // in seconds
});

export const insertUserSchema = createInsertSchema(users).pick({
  name: true,
  email: true,
  password: true,
});

export const insertQuizSchema = createInsertSchema(quizzes).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertQuestionResponseSchema = createInsertSchema(questionResponses).omit({
  id: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;
export type InsertQuiz = z.infer<typeof insertQuizSchema>;
export type Quiz = typeof quizzes.$inferSelect;
export type InsertQuestionResponse = z.infer<typeof insertQuestionResponseSchema>;
export type QuestionResponse = typeof questionResponses.$inferSelect;

========================================
33. CLIENT/SRC/COMPONENTS/UI/* (UI Components)
========================================
Note: Copy all the shadcn/ui components from the existing project. These include:
- button.tsx
- input.tsx  
- card.tsx
- label.tsx
- progress.tsx
- radio-group.tsx
- separator.tsx
- toast.tsx
- toaster.tsx
- And all other UI components from the components/ui directory

========================================
DEPLOYMENT INSTRUCTIONS
========================================

1. SETUP PROJECT:
   - Create a new directory for your project
   - Copy all files maintaining the exact directory structure
   - Run: npm install

2. BUILD & RUN:
   - Development: npm run dev
   - Production Build: npm run build
   - Production Start: npm start

3. DEPLOYMENT OPTIONS:
   - Vercel: Connect your GitHub repo, automatic deployment
   - Netlify: Drag and drop the dist folder after building
   - Railway: Connect GitHub repo, automatic deployment
   - Heroku: Use Git deployment with Procfile

4. ENVIRONMENT VARIABLES:
   - No external APIs keys required
   - Uses Open Trivia Database (free, no auth needed)
   - All data stored in localStorage (frontend)

5. FEATURES:
   ✅ User authentication (name-based, frontend only)
   ✅ Personalized greetings ("Hello [name], ready to conquer quiz on [topic]?")
   ✅ Dynamic quiz generation from Open Trivia Database API
   ✅ 45-second timed questions with auto-submit
   ✅ Interactive quiz navigation and progress tracking
   ✅ Comprehensive results analysis and grading
   ✅ Professional report cards with download/print options
   ✅ Performance charts and statistics
   ✅ Responsive design for all devices

This is a complete, production-ready quiz application that can be deployed anywhere!